{"name":"Safe","body":"astrails-safe\r\n=============\r\n\r\nSimple database and filesystem backups with S3 and Rackspace Cloud Files support (with optional encryption)\r\n\r\n* Home: [http://astrails.com/opensource/astrails-safe](http://astrails.com/opensource/astrails-safe)\r\n* Code: [http://github.com/astrails/safe](http://github.com/astrails/safe)\r\n* Blog: [http://blog.astrails.com/astrails-safe](http://blog.astrails.com/astrails-safe)\r\n\r\n\r\nMotivation\r\n----------\r\n\r\nWe needed a backup solution that will satisfy the following requirements:\r\n\r\n* opensource\r\n* simple to install and configure\r\n* support for simple ‘tar’ backups of directories (with includes/excludes)\r\n* support for simple mysqldump of mysql databases\r\n* support for symmetric or public key encryption\r\n* support for local filesystem, Amazon S3, and Rackspace Cloud Files for storage\r\n* support for backup rotation. we don’t want backups filling all the diskspace or cost a fortune on S3 or Cloud Files\r\n\r\nAnd since we didn't find any, we wrote our own :)\r\n\r\nContributions\r\n-------------\r\n\r\nThe following functionality was contributed by astrails-safe users:\r\n\r\n* PostgreSQL dump using `pg_dump` (by Mark Mansour <mark@stateofflux.com>)\r\n* Subversion dump using svndump (by Richard Luther <richard.luther@gmail.com>)\r\n* SFTP remote storage (by Adam <adam@mediadrive.ca>)\r\n* benchmarking output (By Neer)\r\n* README fixes (by Bobby Wilson)\r\n* improved config file parsing (by Fedor Kocherga <fkocherga@gmail.com>)\r\n* mysql password file quoting (by Jonathan Sutherland <jonathan.sutherland@gmail.com>)\r\n* Rackspace Cloud Files support (by H. Wade Minter <minter@lunenburg.org>)\r\n\r\nThanks to all :)\r\n\r\nInstallation\r\n------------\r\n\r\n    sudo gem install astrails-safe --source http://gemcutter.org\r\n\r\nReporting problems\r\n------------------\r\n\r\nPlease report problems at the [Issues tracker](http://github.com/astrails/safe/issues)\r\n\r\nUsage\r\n-----\r\n\r\n    Usage:\r\n       astrails-safe [OPTIONS] CONFIG_FILE\r\n    Options:\r\n      -h, --help           This help screen\r\n      -v, --verbose        be verbose, duh!\r\n      -n, --dry-run        just pretend, don't do anything.\r\n      -L, --local          skip remote storage, only do local backups\r\n\r\nNote: CONFIG\\_FILE will be created from template if missing\r\n\r\nEncryption\r\n----------\r\n\r\nIf you want to encrypt your backups you have 2 options:\r\n* use simple password encryption\r\n* use GPG public key encryption\r\n\r\n> IMPORTANT: some gpg installations automatically set 'use-agent' option in the default\r\n> configuration file that is created when you run gpg for the first time. This will cause\r\n> gpg to fail on the 2nd run if you don't have the agent running. The result is that\r\n> 'astrails-safe' will work ONCE when you manually test it and then fail on any subsequent run.\r\n> The solution is to remove the 'use-agent' from the config file (usually /root/.gnupg/gpg.conf)\r\n> To mitigate this problem for the gpg 1.x series '--no-use-agent' option is added by defaults\r\n> to the autogenerated config file, but for gpg2 is doesn't work. as the manpage says it:\r\n> \"This is dummy option. gpg2 always requires the agent.\" :(\r\n\r\nFor simple password, just add password entry in gpg section.\r\nFor public key encryption you will need to create a public/secret keypair.\r\n\r\nWe recommend to create your GPG keys only on your local machine and then\r\ntransfer your public key to the server that will do the backups.\r\n\r\nThis way the server will only know how to encrypt the backups but only you\r\nwill be able to decrypt them using the secret key you have locally. Of course\r\nyou MUST backup your backup encryption key :)\r\nWe recommend also pringing the hard paper copy of your GPG key 'just in case'.\r\n\r\nThe procedure to create and transfer the key is as follows:\r\n\r\n1. run 'gpg --gen-key' on your local machine and follow onscreen instructions to create the key\r\n   (you can accept all the defaults).\r\n\r\n2. extract your public key into a file (assuming you used test@example.com as your key email):\r\n   `gpg -a --export test@example.com > test@example.com.pub`\r\n\r\n3. transfer public key to the server\r\n   `scp test@example.com.pub root@example.com:`\r\n\r\n4. import public key on the remote system:\r\n\r\n    $ gpg --import test@example.com.pub\r\n    gpg: key 45CA9403: public key \"Test Backup <test@example.com>\" imported\r\n    gpg: Total number processed: 1\r\n    gpg:               imported: 1\r\n\r\n5. since we don't keep the secret part of the key on the remote server, gpg has\r\n   no way to know its yours and can be trusted.\r\n   To fix that we can sign it with other trusted key, or just directly modify its\r\n   trust level in gpg (use level 5):\r\n\r\n     $ gpg --edit-key test@example.com\r\n     ...\r\n     Command> trust\r\n     ...\r\n     1 = I don't know or won't say\r\n     2 = I do NOT trust\r\n     3 = I trust marginally\r\n     4 = I trust fully\r\n     5 = I trust ultimately\r\n     m = back to the main menu\r\n\r\n     Your decision? 5\r\n     ...\r\n     Command> quit\r\n\r\n6. export your secret key for backup\r\n   (we recommend to print it on paper and burn to a CD/DVD and store in a safe place):\r\n\r\n    $ gpg -a --export-secret-key test@example.com > test@example.com.key\r\n\r\n\r\n\r\nExample configuration\r\n---------------------\r\n\r\n    safe do\r\n      local :path => \"/backup/:kind/:id\"\r\n\r\n      s3 do\r\n        key \"....................\"\r\n        secret \"........................................\"\r\n        bucket \"backup.astrails.com\"\r\n        path \"servers/alpha/:kind/:id\"\r\n      end\r\n\r\n      cloudfiles do\r\n        user \"...........\"\r\n        api_key \".................................\"\r\n        container \"safe_backup\"\r\n        path \":kind/\" # this is default\r\n        service_net false\r\n      end\r\n\r\n      sftp do\r\n        host \"sftp.astrails.com\"\r\n        user \"astrails\"\r\n        # port 8023\r\n        password \"ssh password for sftp\"\r\n      end\r\n\r\n      gpg do\r\n        command \"/usr/local/bin/gpg\"\r\n        options  \"--no-use-agent\"\r\n        # symmetric encryption key\r\n        # password \"qwe\"\r\n\r\n        # public GPG key (must be known to GPG, i.e. be on the keyring)\r\n        key \"backup@astrails.com\"\r\n      end\r\n\r\n      keep do\r\n        local 20\r\n        s3 100\r\n        cloudfiles 100\r\n        sftp 100\r\n      end\r\n\r\n      mysqldump do\r\n        options \"-ceKq --single-transaction --create-options\"\r\n\r\n        user \"root\"\r\n        password \"............\"\r\n        socket \"/var/run/mysqld/mysqld.sock\"\r\n\r\n        database :blog\r\n        database :servershape\r\n        database :astrails_com\r\n        database :secret_project_com do\r\n          skip_tables \"foo\"\r\n          skip_tables [\"bar\", \"baz\"]\r\n        end\r\n\r\n      end\r\n\r\n      svndump do\r\n        repo :my_repo do\r\n          repo_path \"/home/svn/my_repo\"\r\n        end\r\n      end\r\n\r\n      pgdump do\r\n        options \"-i -x -O\"   # -i => ignore version, -x => do not dump privileges (grant/revoke), -O => skip restoration of object ownership in plain text format\r\n\r\n        user \"username\"\r\n        password \"............\"  # shouldn't be used, instead setup ident.  Current functionality exports a password env to the shell which pg_dump uses - untested!\r\n\r\n        database :blog\r\n        database :stateofflux_com\r\n      end\r\n\r\n      tar do\r\n        options \"-h\" # dereference symlinks\r\n        archive \"git-repositories\", :files => \"/home/git/repositories\"\r\n        archive \"dot-configs\",      :files => \"/home/*/.[^.]*\"\r\n        archive \"etc\",              :files => \"/etc\", :exclude => \"/etc/puppet/other\"\r\n\r\n        archive \"blog-astrails-com\" do\r\n          files \"/var/www/blog.astrails.com/\"\r\n          exclude \"/var/www/blog.astrails.com/log\"\r\n          exclude \"/var/www/blog.astrails.com/tmp\"\r\n        end\r\n\r\n        archive \"astrails-com\" do\r\n          files \"/var/www/astrails.com/\"\r\n          exclude [\"/var/www/astrails.com/log\", \"/var/www/astrails.com/tmp\"]\r\n        end\r\n      end\r\n    end\r\n\r\nCopyright\r\n---------\r\n\r\nCopyright (c) 2010 Astrails Ltd. See LICENSE for details.\r\n","tagline":"simple backup for mysql, posgresql, svn and files to s3 or local filesystem","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}